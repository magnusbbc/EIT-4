






--------------------------------------------------------------------------------------
--Engineer: Jakob Thomsen, Mikkel Hardysoe, Magnus Christensen
--Module Name: (Data) Memory
--
--Description:
--
--
--
--------------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Memory is
  port
    (
      data_in : in std_logic_vector (16 -1 downto 0);  --Data in
      data_out : out std_logic_vector (16 -1 downto 0) := (others => '0');  --Data Out
      address : in std_logic_vector (16 -1 downto 0);  --address bus
      write_enable : in std_logic;  -- Write Enable
      read_enable : in std_logic;  -- Read Enable
      clk : in std_logic  -- Clock
      );

end Memory;

architecture falling of Memory is

  type ram_type is array (8192 -1 downto 0) of std_logic_vector(16 -1 downto 0);  -- Total 516k memory bits 8k*32 = 256k we use 50% for DataMemory and 50% for ProgramMemory
  signal RAM : ram_type := (others => x"0000");
begin

  --------------------------------------------
  -- MemoryReadWrite:
  -- Reads and writes data from the data RAM
  --------------------------------------------
  MemoryReadWrite : process (clk)
  begin
    if (falling_edge(clk)) then  -- Start when the clock rises
      if write_enable = '1' then  -- Write enable
        RAM(to_integer(unsigned(address))) <= data_in;  --write Data In bus into RAM array at position address
      end if;
      if read_enable = '1' then  -- Read enable
        data_out <= RAM(to_integer(unsigned(address)));  -- writes RAM array at the address position into Data Out bus.
      end if;
      if write_enable = '0' and read_enable = '0' then  --if not writing or reading set all to high impedance to make sure nothing unintended happens
        data_out <= (others => 'Z');
      end if;
    end if;
  end process;
end falling;